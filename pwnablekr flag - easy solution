This challenge is more into reversing which require to find a hidden flag inside the binary. The binary can be download via http://pwnable.kr/bin/flag. We checked the file if it is stripped or packed.

yuri@byakugan:~/pwnable_kr/flag$ file flag 
flag: ELF 64-bit LSB  executable, x86-64, version 1 (GNU/Linux), statically linked, stripped

yuri@byakugan:~/pwnable_kr/flag$ hexdump -C ./flag
00000000  7f 45 4c 46 02 01 01 03  00 00 00 00 00 00 00 00  |.ELF............|
00000010  02 00 3e 00 01 00 00 00  f0 a4 44 00 00 00 00 00  |..>.......D.....|
00000020  40 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |@...............|
00000030  00 00 00 00 40 00 38 00  02 00 40 00 00 00 00 00  |....@.8...@.....|
00000040  01 00 00 00 05 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 40 00 00 00 00 00  00 00 40 00 00 00 00 00  |..@.......@.....|
00000060  04 ad 04 00 00 00 00 00  04 ad 04 00 00 00 00 00  |................|
00000070  00 00 20 00 00 00 00 00  01 00 00 00 06 00 00 00  |.. .............|
00000080  d8 62 0c 00 00 00 00 00  d8 62 6c 00 00 00 00 00  |.b.......bl.....|
00000090  d8 62 6c 00 00 00 00 00  00 00 00 00 00 00 00 00  |.bl.............|
000000a0  00 00 00 00 00 00 00 00  00 00 20 00 00 00 00 00  |.......... .....|
000000b0  fc ac e0 a1 55 50 58 21  1c 08 0d 16 00 00 00 00  |....UPX!........|
000000c0  21 7c 0d 00 21 7c 0d 00  90 01 00 00 92 00 00 00  |!|..!|..........|
000000d0  08 00 00 00 f7 fb 93 ff  7f 45 4c 46 02 01 01 03  |.........ELF....|


Seems the binary is packed using UPX. We used UPX for Linux to unpacked the binary.

yuri@byakugan:~/pwnable_kr/flag$ upx -d ./flag 
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2013
UPX 3.91        Markus Oberhumer, Laszlo Molnar & John Reiser   Sep 30th 2013

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
    887219 <-    335288   37.79%  linux/ElfAMD   flag


Voila! The UPX packer used here is not the custom packer. In Windows, normally we will see a custom UPX packer. We tried different ways to see if the binary accepting arguments. 

yuri@byakugan:~/pwnable_kr/flag$ ./flag AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
I will malloc() and strcpy the flag there. take it.
yuri@byakugan:~/pwnable_kr/flag$ echo "AAAAAAAAAAAAAAAABCD" | ./flag 
I will malloc() and strcpy the flag there. take it.


We choose to debug the binary. Good thing is the binary has symbols and making our life easier to disassamble the functions. First thing we would like to look into the main() function:

.text:0000000000401164 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000401164                 public main
.text:0000000000401164 main            proc near               ; DATA XREF: _start+1Do
.text:0000000000401164
.text:0000000000401164 var_8           = qword ptr -8
.text:0000000000401164
.text:0000000000401164                 push    rbp
.text:0000000000401165                 mov     rbp, rsp
.text:0000000000401168                 sub     rsp, 10h
.text:000000000040116C                 mov     edi, offset aIWillMallocAnd 
.text:0000000000401171                 call    puts			
.text:0000000000401176                 mov     edi, 64h
.text:000000000040117B                 call    malloc
.text:0000000000401180                 mov     [rbp+var_8], rax
.text:0000000000401184                 mov     rdx, cs:flag
.text:000000000040118B                 mov     rax, [rbp+var_8]
.text:000000000040118F                 mov     rsi, rdx
.text:0000000000401192                 mov     rdi, rax
.text:0000000000401195                 call    sub_400320
.text:000000000040119A                 mov     eax, 0
.text:000000000040119F                 leave
.text:00000000004011A0                 retn
.text:00000000004011A0 main            endp


From the code above, we can see puts() and malloc() being called before. The puts() is to print the string "I will malloc() and strcpy the flag there. take it." and malloc used to allocate the buffer. At the offset "0000000000401184" seems to be more interesting where we can see "flag". The "flag" variable is pointing into .data section (offset 00000000006C2070) which is containing the actual flag. 

.data:00000000006C2070 flag            dq offset aUpx___?SoundsL ; DATA XREF: main+20r
